{"version":3,"sources":["stores/Store.js","utils/constants.js","utils/persistance.js","components/Selector.js","components/NewsCards.js","components/LeftDrawer.js","components/Canvas.js","App.js","serviceWorker.js","index.js"],"names":["selectedCountryStore","atom","key","default","canvasNewsStore","STORAGE_CONSTANTS","ENDPOINT","COUNTRIES","NEWS","process","GLOBAL","writeToStorage","value","localForage","setItem","mapCountryData","countries","map","country","label","name","iso2","Selector","useState","setCountries","setSelectedCountry","useSetRecoilState","useEffect","a","getItem","countriesInStorage","fetch","response","json","data","countriesList","length","fetchAllCountries","style","margin","options","onChange","oldSelectedCountry","NewsCards","props","news","setCanvasNews","item","Card","CardActionArea","onClick","e","oldUrlLink","url","CardMedia","height","image","urlToImage","CardContent","title","mapNewsCards","useStyles","makeStyles","theme","drawer","width","flexShrink","drawerPaper","LeftDrawer","classes","useRecoilValue","setNews","toLowerCase","articles","fetchNewsData","Fragment","Drawer","className","variant","anchor","paper","Canvas","newsLink","canvasNews","alt","src","displayCovidImage","Alert","severity","action","Button","undefined","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f577a225.chunk.js","sourcesContent":["import { atom } from 'recoil';\n\n// Atoms\nexport const selectedCountryStore = atom({\n    key: 'selectedCountry',\n    default: null\n})\n\nexport const canvasNewsStore = atom({\n    key: 'canvasNews',\n    default: null\n})","export const STORAGE_CONSTANTS = {\n    COUNTRIES: 'countries'\n}\n\nexport const ENDPOINT = {\n    COUNTRIES: 'https://covid19.mathdro.id/api/countries',\n    NEWS: `https://newsapi.org/v2/top-headlines?q=COVID&apiKey=${process.env.REACT_APP_NEWS_API_KEY}`,\n    GLOBAL: 'https://covid19.mathdro.id/api/og'\n}\n","import localForage from 'localforage'\n\nexport const writeToStorage = (key, value) => {\n    return localForage.setItem(key, value)\n}\n\nexport const retrieveFromStorage = (key) => {\n    return localForage.getItem(key)\n}","import Select from 'react-select'\nimport React, { useEffect, useState } from \"react\";\nimport { useSetRecoilState } from 'recoil'\nimport { selectedCountryStore } from '../stores/Store'\nimport { STORAGE_CONSTANTS, ENDPOINT } from '../utils/constants'\nimport { retrieveFromStorage, writeToStorage } from '../utils/persistance'\n\nfunction Selector() {\n    const [countries, setCountries] = useState([])\n    const setSelectedCountry = useSetRecoilState(selectedCountryStore)\n    useEffect(() => {\n        // We want to make a network requests in case the country list changes for the API\n        const fetchAllCountries = async () => {\n            const countriesInStorage = await retrieveFromStorage(STORAGE_CONSTANTS.COUNTRIES)\n            if (!countriesInStorage) {\n                // no countries stored, make network call\n                const response = await fetch(ENDPOINT.COUNTRIES);\n                const data = await response.json();\n                const countriesList = await writeToStorage(STORAGE_CONSTANTS.COUNTRIES, mapCountryData(data.countries))\n                setCountries(countriesList)\n            } else {\n                // country list already exists in storage\n                if (countries.length === 0) {\n                    setCountries(countriesInStorage)\n                }\n            }\n        }\n        fetchAllCountries()\n    }, [countries.length]);\n\n    const handleCountrySelect = country => {\n        setSelectedCountry((oldSelectedCountry) => {\n            return country\n        })\n    }\n    return (<div style={{ margin: '15px' }}>\n        <Select options={countries} onChange={handleCountrySelect} />\n    </div>)\n}\n\n// Helper Functions\nconst mapCountryData = (countries) => {\n    return countries.map(country => {\n        return { label: country.name, value: country.iso2 };\n    })\n}\nexport default Selector","import React from \"react\";\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport { useSetRecoilState } from 'recoil'\nimport { canvasNewsStore } from '../stores/Store'\n\nfunction NewsCards(props) {\n    const { news } = props\n    const setCanvasNews = useSetRecoilState(canvasNewsStore)\n    const mapNewsCards = (news) => {\n        return news.map((item) => {\n            return (<div>\n                <Card>\n                    <CardActionArea onClick={\n                        (e) => {\n                            setCanvasNews((oldUrlLink) => item.url)\n                        }\n                    }>\n                        <CardMedia style={{ height: '150px' }} image={item.urlToImage} />\n                        <CardContent>\n                            <h3>\n                                {item.title}\n                            </h3>\n                        </CardContent>\n                    </CardActionArea>\n\n                </Card>\n            </div>)\n        })\n    }\n    return (\n        <div>\n            <h1>News Articles</h1>\n            {news.length !== 0 && mapNewsCards(news)}\n            {news.length === 0 && <div> Sorry No News Available!</div>}\n        </div>\n    )\n}\n\nexport default NewsCards\n","import React, { useEffect, useState } from \"react\";\nimport { useRecoilValue } from 'recoil';\nimport Drawer from '@material-ui/core/Drawer';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { selectedCountryStore } from '../stores/Store'\nimport { ENDPOINT } from '../utils/constants'\nimport NewsCards from './NewsCards'\nconst drawerWidth = '400px'\nconst useStyles = makeStyles((theme) => ({\n    drawer: {\n        width: drawerWidth,\n        flexShrink: 0,\n    },\n    drawerPaper: {\n        width: drawerWidth,\n    }\n}));\n\nfunction LeftDrawer() {\n    const classes = useStyles()\n    const country = useRecoilValue(selectedCountryStore)\n    const [news, setNews] = useState([])\n    useEffect(() => {\n        const fetchNewsData = async () => {\n            if (country) {\n                const response = await fetch(`${ENDPOINT.NEWS}&country=${country.value.toLowerCase()}`)\n                const data = await response.json()\n                setNews(data.articles)\n            } else {\n                const response = await fetch(`${ENDPOINT.NEWS}`)\n                const data = await response.json()\n                setNews(data.articles)\n            }\n        }\n        fetchNewsData()\n    }, [country])\n    return (\n        <React.Fragment>\n            <Drawer\n                className={classes.drawer}\n                variant=\"permanent\"\n                anchor=\"left\"\n                classes={{\n                    paper: classes.drawerPaper,\n                }}>\n                <NewsCards news={news} />\n            </Drawer>\n        </React.Fragment>\n    )\n}\n\nexport default LeftDrawer","import React from \"react\";\nimport { useRecoilValue, useSetRecoilState } from 'recoil';\nimport { selectedCountryStore, canvasNewsStore } from '../stores/Store'\nimport { ENDPOINT } from '../utils/constants'\nimport Alert from '@material-ui/lab/Alert';\nimport Button from '@material-ui/core/Button';\n\nfunction Canvas() {\n    const country = useRecoilValue(selectedCountryStore)\n    const canvasNews = useRecoilValue(canvasNewsStore)\n    const setCanvasNews = useSetRecoilState(canvasNewsStore)\n    const displayCovidImage = (country) => {\n        return (<React.Fragment>\n            {!country && <img alt=\"global_og_image\" src={ENDPOINT.GLOBAL} />}\n            {country && <img alt=\"og_image\" src={`${ENDPOINT.COUNTRIES}/${country.value}/og`} />}\n        </React.Fragment>)\n    }\n    const displayNewsIframe = (newsLink) => {\n        return (\n            <React.Fragment>\n                <Alert severity=\"info\" action={<Button onClick={(e) => {\n                        setCanvasNews(undefined)\n                    }}>Close</Button>}> You are in an iframe! Close it to go back\n         \n                </Alert>\n                <iframe height={'100%'} width={'100%'} title={'news iframe'} src={newsLink} />\n            </React.Fragment>\n        )\n    }\n    return (\n        <div className={'canvas'}>\n            {!canvasNews && displayCovidImage(country)}\n            {canvasNews && displayNewsIframe(canvasNews)}\n        </div>\n\n    )\n}\n\nexport default Canvas","import React from \"react\";\nimport \"./App.css\";\nimport { RecoilRoot } from 'recoil';\nimport Selector from './components/Selector';\nimport LeftDrawer from './components/LeftDrawer';\nimport Canvas from './components/Canvas';\nfunction App() {\n  return (\n    <RecoilRoot>\n      <div className=\"App\">\n        <LeftDrawer />\n        <div style={{ height: '100%', width: '100%' }}>\n          <Selector />\n          <Canvas />\n        </div>\n      </div>\n    </RecoilRoot>\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}